@inject IJSRuntime jsRuntime
@inject ApiClientService service
@inject IJSRuntime jsRuntime

<style>
    .uncover-password {
        cursor: pointer;
    }

    .rules-box{
        border: 1px solid #f9dada;
        border-radius: 10px;
        box-shadow: 1px 0px 5px 2px;
        width: 467px;
        background-color: #ece3ff;
        padding-left: 4px;
    }
</style>

<div class="modal" tabindex="-1" role="dialog" id="changePasswordModal">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Change Password</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@ChangePasswordDto" OnValidSubmit="@HandleValidSubmit" Context="formContext">
                    <DataAnnotationsValidator />
                    <span class="text-danger">@result</span>

                    <div class="form-group mt-3">
                        <label for="name">Current Password</label>
                        <InputText id="password" type="password" class="form-control" @bind-Value="@ChangePasswordDto.CurrentPassword" />
                        <ValidationMessage For="@(() => ChangePasswordDto.CurrentPassword)"  />
                    </div>

                    <div class="form-group mt-3">
                        <label for="name">New Password</label>
                        <InputText id="NewPassword" type="password" class="form-control" @bind-Value="@ChangePasswordDto.NewPassword" @oninput="NewPasswordChanged"  />
                        <ValidationMessage For="@(() => ChangePasswordDto.NewPassword)" />
                    </div>

                    <div class="form-group mt-4">
                        <button type="submit" class="btn btn-primary">Submit</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    </div>

                </EditForm>

                <div id="passwordRules" class="mt-2 ml-2 mb-2 rules-box">
                    <h4>Password Rules:</h4>
                    <ul>
                        <li id="lengthRule" class="pass-role">At least 8 characters, with a max of 16 characters.</li>
                        <li id="numberRule" class="pass-role">At least one number.</li>
                        <li id="caseRule" class="pass-role">At least one capital and one small letter.</li>
                        <li id="specialCharRule" class="pass-role">At least one special character.</li>
                    </ul>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public UserDto UserDto { get; set; }

    public ChangePasswordDto ChangePasswordDto { get; set; } = new ChangePasswordDto();
    string result = string.Empty;

    private async void HandleValidSubmit()
    {
        ChangePasswordDto.Id = UserDto.Id;
        var response = await service.PostAsync<QueryResult<bool>>(ChangePasswordDto, "User/ChangePassword");

        if (response.Success)
        {
            string result = string.Empty;
            await jsRuntime.InvokeAsync<object>("CloseModal", "changePasswordModal");
            await jsRuntime.InvokeAsync<object>("resetRules");
            ChangePasswordDto = new ChangePasswordDto();
            StateHasChanged();
        }
        else
        {
            result = response.Message;
            StateHasChanged();
        }
    }

    private async void NewPasswordChanged()
    {
        await jsRuntime.InvokeAsync<object>("validatePassword");
    }
}
